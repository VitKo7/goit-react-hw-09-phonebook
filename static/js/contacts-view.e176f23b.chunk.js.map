{"version":3,"sources":["components/contact-form/ContactForm.module.css","components/contact-list-item/ContactListItem.module.css","components/contact-list/transitions/pop.module.css","components/contact-list/ContactList.module.css","components/filter/Filter.module.css","views/ContactsView.module.css","redux/contacts/contacts-selectors.js","components/contact-form/ContactForm.jsx","redux/contacts/contacts-operations.js","components/contact-list-item/ContactListItem.jsx","components/contact-list/ContactList.jsx","components/filter/Filter.jsx","views/ContactsView.jsx"],"names":["module","exports","getAllContacts","state","contacts","items","getFilter","filter","getFilteredContacts","createSelector","item","name","toLowerCase","includes","loading","length","ContactForm","useState","setName","number","setNumber","useSelector","contactsSelectors","dispatch","useDispatch","resetForm","onSubmit","event","preventDefault","contact","entryCheck","find","alert","contactNew","id","nanoid","a","addContactRequest","axios","post","data","addContactSuccess","addContactError","message","className","styles","addContactForm","label","type","placeholder","input","onChange","evt","target","value","btnAdd","ContactListItem","data-id","onClick","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","deleteContact","btnDelete","ContactList","useEffect","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","TransitionGroup","component","list","map","CSSTransition","timeout","classNames","popTransition","contactListItem","Filter","handleInput","autoComplete","ContactsView","isLoadingContacts","container","loader","color","height","width","contactsTitle"],"mappings":"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","file":"static/js/contacts-view.e176f23b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addContactForm\":\"ContactForm_addContactForm__3raIB\",\"label\":\"ContactForm_label__3SwUG\",\"input\":\"ContactForm_input__2YE8A\",\"text\":\"ContactForm_text__1paOr\",\"btnAdd\":\"ContactForm_btnAdd__bIXJN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnDelete\":\"ContactListItem_btnDelete__1uSG2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__p4nuU\",\"enterActive\":\"pop_enterActive__2ltGE\",\"exit\":\"pop_exit__Dv7Xo\",\"exitActive\":\"pop_exitActive__1tIbY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__7U1u-\",\"contactListItem\":\"ContactList_contactListItem__3dqTG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__3BV_q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsView_container__2HwRz\",\"contacts\":\"ContactsView_contacts__2W0rv\",\"contactsTitle\":\"ContactsView_contactsTitle__2dsN1\",\"loader\":\"ContactsView_loader__1ApEo\"};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getFilteredContacts = createSelector([getAllContacts, getFilter], (items, filter) => {\r\n  return items.filter(item => item.name.toLowerCase().includes(filter.toLowerCase()));\r\n});\r\n\r\nconst getContacts = state => (state.contacts.items.length > 2 ? getFilteredContacts(state) : state.contacts.items);\r\n\r\nexport default {\r\n  getLoading,\r\n  getAllContacts,\r\n  getFilter,\r\n  getFilteredContacts,\r\n  getContacts,\r\n};\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport { addContact } from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\nimport styles from './ContactForm.module.css';\r\n\r\nconst ContactForm = () => {\r\n  const [name, setName] = useState('');\r\n  const updateName = evt => {\r\n    setName(evt.target.value);\r\n  };\r\n\r\n  const [number, setNumber] = useState('');\r\n  const updateNumber = evt => {\r\n    setNumber(evt.target.value);\r\n  };\r\n\r\n  const contacts = useSelector(contactsSelectors.getAllContacts);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    // const { name, number } = this.state;\r\n\r\n    const entryCheck = contacts.find(\r\n      contact => contact.name === name || contact.number === number,\r\n    );\r\n\r\n    if (entryCheck) {\r\n      alert(\r\n        `Either '${entryCheck.name}' or '${entryCheck.number}' already exists`,\r\n      );\r\n    } else if (name.length === 0 || number.length === 0) {\r\n      alert(`Please, fill in all the fields`);\r\n    } else {\r\n      const contactNew = {\r\n        id: nanoid(),\r\n        name,\r\n        number,\r\n      };\r\n      dispatch(addContact(contactNew));\r\n    }\r\n    resetForm();\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  // const { name, number } = state;\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit} className={styles.addContactForm}>\r\n        <label className={styles.label}>Name:</label>\r\n        <input\r\n          name=\"name\"\r\n          type=\"text\"\r\n          placeholder=\"Name Surname\"\r\n          className={styles.input}\r\n          onChange={updateName}\r\n          value={name}\r\n        />\r\n\r\n        <label className={styles.label}>Number:</label>\r\n        <input\r\n          name=\"number\"\r\n          type=\"text\"\r\n          // type=\"tel\"\r\n          placeholder=\"123-456\"\r\n          // pattern=\"[0-9]{3}-[0-9]{3}\"\r\n          className={styles.input}\r\n          onChange={updateNumber}\r\n          value={number}\r\n        />\r\n        {/* <span className={styles.text}>\r\n            <i>Use this format only:</i> xxx-xxx\r\n          </span> */}\r\n\r\n        <button type=\"submit\" className={styles.btnAdd}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import axios from 'axios';\r\n\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error.message));\r\n  }\r\n};\r\n\r\n// const fetchContacts = () => dispatch => {\r\n//   dispatch(fetchContactsRequest());\r\n//   axios\r\n//     .get('/contacts')\r\n//     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n//     .catch(error => dispatch(fetchContactsError(error)));\r\n// };\r\n\r\nconst addContact = contact => async dispatch => {\r\n  dispatch(addContactRequest());\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error.message));\r\n  }\r\n};\r\n\r\n// const addContact = contact => dispatch => {\r\n//   dispatch(addContactRequest());\r\n//   axios\r\n//     .post('/contacts', contact)\r\n//     .then(({ data }) => dispatch(addContactSuccess(data)))\r\n//     .catch(error => dispatch(addContactError(error)));\r\n// };\r\n\r\nconst deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error.message));\r\n  }\r\n};\r\n\r\n// const deleteContact = contactId => dispatch => {\r\n//   dispatch(deleteContactRequest());\r\n\r\n//   axios\r\n//     .delete(`/contacts/${contactId}`)\r\n//     .then(data => dispatch(deleteContactSuccess(contactId)))\r\n//     .catch(error => dispatch(deleteContactError(error)));\r\n// };\r\n\r\nexport { addContact, deleteContact, fetchContacts };\r\n","import React from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteContact } from '../../redux/contacts/contacts-operations';\r\nimport styles from './ContactListItem.module.css';\r\n\r\nexport default function ContactListItem({ id, name, number }) {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <p className={styles.contact}>\r\n        <b>{name}</b>: {number}\r\n      </p>\r\n\r\n      <button\r\n        data-id={id}\r\n        onClick={event => dispatch(deleteContact(id))}\r\n        type=\"button\"\r\n        className={styles.btnDelete}\r\n      >\r\n        Delete\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\n// const ContactListItem = ({ id, name, number, deleteContact }) => {\r\n//   return (\r\n//     <>\r\n//       <p className={styles.contact}>\r\n//         <b>{name}</b>: {number}\r\n//       </p>\r\n\r\n//       <button\r\n//         data-id={id}\r\n//         onClick={event => deleteContact(id)}\r\n//         type=\"button\"\r\n//         className={styles.btnDelete}\r\n//       >\r\n//         Delete\r\n//       </button>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// ContactListItem.propTypes = {\r\n//   id: PropTypes.string.isRequired,\r\n//   name: PropTypes.string.isRequired,\r\n//   number: PropTypes.string.isRequired,\r\n//   deleteContact: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const mapDispatchToProps = {\r\n//   deleteContact,\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactListItem);\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\nimport { fetchContacts } from '../../redux/contacts/contacts-operations';\r\nimport ContactListItem from '../contact-list-item/ContactListItem';\r\n\r\nimport popTransition from './transitions/pop.module.css';\r\n// import slideTransition from './transitions/slide.module.css';\r\nimport styles from './ContactList.module.css';\r\n\r\nconst ContactList = () => {\r\n  // const [state, setState] = useState({});\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"contactsList\">\r\n      {!contacts.length ? (\r\n        <p>There are no contacts here yet ...</p>\r\n      ) : (\r\n        <TransitionGroup component=\"ul\" className={styles.list}>\r\n          {contacts.map(contact => (\r\n            <CSSTransition\r\n              key={contact.id}\r\n              timeout={200}\r\n              classNames={popTransition}\r\n            >\r\n              <li className={styles.contactListItem} key={contact.id}>\r\n                <ContactListItem {...contact} />\r\n              </li>\r\n            </CSSTransition>\r\n          ))}\r\n        </TransitionGroup>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import React, { useEffect } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { handleInput } from '../../redux/contacts/contacts-actions';\r\nimport styles from './Filter.module.css';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\nexport default function Filter() {\r\n  // const [state, setState] = useState({});\r\n  const filter = useSelector(contactsSelectors.getFilter);\r\n  const contacts = useSelector(contactsSelectors.getAllContacts);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (contacts.length <= 2) {\r\n      handleInput('');\r\n    }\r\n  }, [contacts.length]);\r\n\r\n  return (\r\n    <>\r\n      {contacts.length > 2 && (\r\n        <div className=\"contactsFilter\">\r\n          <p>Find contacts by name:</p>\r\n          <input\r\n            name=\"filter\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            className={styles.input}\r\n            onChange={event => dispatch(handleInput(event.target.value))}\r\n            value={filter}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\n// class Filter extends Component {\r\n//   state = {};\r\n\r\n//   componentDidUpdate() {\r\n//     if (this.props.contacts.length <= 2) {\r\n//       this.props.handleInput('');\r\n//     }\r\n//   }\r\n\r\n//   render() {\r\n//     const { contacts, filter, handleInput } = this.props;\r\n\r\n//     return (\r\n//       <>\r\n//         {contacts.length > 2 && (\r\n//           <div className=\"contactsFilter\">\r\n//             <p>Find contacts by name:</p>\r\n//             <input\r\n//               name=\"filter\"\r\n//               type=\"text\"\r\n//               autoComplete=\"off\"\r\n//               className={styles.input}\r\n//               onChange={event => handleInput(event.target.value)}\r\n//               value={filter}\r\n//             />\r\n//           </div>\r\n//         )}\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// Filter.propTypes = {\r\n//   filter: PropTypes.string.isRequired,\r\n//   handleInput: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const mapStateToProps = state => ({\r\n//   filter: contactsSelectors.getFilter(state),\r\n//   contacts: contactsSelectors.getAllContacts(state),\r\n// });\r\n\r\n// const mapDispatchToProps = {\r\n//   handleInput,\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport ContactForm from '../components/contact-form/ContactForm';\r\nimport ContactList from '../components/contact-list/ContactList';\r\nimport Filter from '../components/filter/Filter';\r\nimport contactsSelectors from '../redux/contacts/contacts-selectors';\r\nimport Loader from 'react-loader-spinner';\r\nimport styles from './ContactsView.module.css';\r\n\r\nconst ContactsView = () => {\r\n  const isLoadingContacts = useSelector(contactsSelectors.getLoading);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <h2>Phonebook</h2>\r\n      <ContactForm />\r\n\r\n      {isLoadingContacts && (\r\n        <div className={styles.loader}>\r\n          <Loader type=\"ThreeDots\" color=\"green\" height={80} width={80} />\r\n        </div>\r\n      )}\r\n\r\n      <div className={styles.contacts}>\r\n        <h3 className={styles.contactsTitle}>Contacts</h3>\r\n        <Filter />\r\n        <ContactList />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactsView;\r\n"],"sourceRoot":""}