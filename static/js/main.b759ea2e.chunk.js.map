{"version":3,"sources":["components/Navigation.js","components/user-menu/default-avatar.png","components/user-menu/UserMenu.js","components/AuthNav.js","components/AppBar.js","components/container/Container.js","components/PrivateRoute.js","components/PublicRoute.js","components/app/App.jsx","redux/contacts/contacts-reducer.js","redux/store.js","index.js","redux/contacts/contacts-actions.js","redux/auth/auth-actions.js","redux/auth/auth-reducer.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js"],"names":["styles","link","display","textDecoration","padding","fontWeight","color","activeLink","Navigation","isAuthenticated","useSelector","authSelectors","getIsAuthenticated","to","exact","style","activeStyle","container","alignItems","avatar","marginRight","name","UserMenu","getUsername","dispatch","useDispatch","src","defaultAvatar","alt","width","type","onClick","authOperations","logOut","AuthNav","header","justifyContent","borderBottom","AppBar","Container","children","className","PrivateRoute","Component","component","redirectTo","routeProps","render","props","PublicRoute","restricted","HomeView","lazy","ContactsView","RegisterView","LoginView","App","useEffect","getCurrentUser","fallback","height","path","contacts","createReducer","fetchContactsSuccess","_","payload","addContactSuccess","state","deleteContactSuccess","filter","contact","id","authActions","logoutSuccess","loading","fetchContactsRequest","fetchContactsError","addContactRequest","addContactError","deleteContactRequest","deleteContactError","handleInput","combineReducers","items","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","contactsReducer","persistor","persistStore","ReactDOM","StrictMode","document","getElementById","createAction","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","email","user","token","setError","error","axios","defaults","baseURL","headers","common","Authorization","register","credentials","a","post","response","data","message","logIn","getState","persistedToken","get","console","log"],"mappings":"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","file":"static/js/main.b759ea2e.chunk.js","sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { authSelectors } from '../redux/auth';\n\nconst styles = {\n  link: {\n    display: 'inline-block',\n    textDecoration: 'none',\n    padding: 12,\n    fontWeight: 700,\n    color: '#2A363B',\n  },\n  activeLink: {\n    color: '#E84A5F',\n  },\n};\n\nexport default function Navigation() {\n  const isAuthenticated = useSelector(authSelectors.getIsAuthenticated);\n\n  return (\n    <nav>\n      <NavLink to=\"/\" exact style={styles.link} activeStyle={styles.activeLink}>\n        Главная\n      </NavLink>\n\n      {isAuthenticated && (\n        <NavLink\n          to=\"/contacts\"\n          exact\n          style={styles.link}\n          activeStyle={styles.activeLink}\n        >\n          Контакты\n        </NavLink>\n      )}\n    </nav>\n  );\n}\n\n// const Navigation = ({ isAuthenticated }) => (\n//   <nav>\n//     <NavLink to=\"/\" exact style={styles.link} activeStyle={styles.activeLink}>\n//       Главная\n//     </NavLink>\n\n//     {isAuthenticated && (\n//       <NavLink\n//         to=\"/contacts\"\n//         exact\n//         style={styles.link}\n//         activeStyle={styles.activeLink}\n//       >\n//         Контакты\n//       </NavLink>\n//     )}\n//   </nav>\n// );\n\n// const mapStateToProps = state => ({\n//   isAuthenticated: authSelectors.getIsAuthenticated(state),\n// });\n\n// export default connect(mapStateToProps)(Navigation);\n","export default __webpack_public_path__ + \"static/media/default-avatar.bd60660e.png\";","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authSelectors, authOperations } from '../../redux/auth';\nimport defaultAvatar from './default-avatar.png';\n\nconst styles = {\n  container: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  avatar: {\n    marginRight: 4,\n  },\n  name: {\n    fontWeight: 700,\n    marginRight: 12,\n  },\n};\n\nexport default function UserMenu() {\n  const name = useSelector(authSelectors.getUsername);\n\n  const dispatch = useDispatch();\n  const onLogout = () => dispatch(authOperations.logOut());\n\n  return (\n    <div style={styles.container}>\n      <img src={defaultAvatar} alt=\"avatar\" width=\"32\" style={styles.avatar} />\n      <span style={styles.name}>Welcome, {name}</span>\n      <button type=\"button\" onClick={onLogout}>\n        Logout\n      </button>\n    </div>\n  );\n}\n\n// const UserMenu = ({ avatar, name, onLogout }) => (\n//   <div style={styles.container}>\n//     <img src={avatar} alt=\"avatar\" width=\"32\" style={styles.avatar} />\n//     <span style={styles.name}>Welcome, {name}</span>\n//     <button type=\"button\" onClick={onLogout}>\n//       Logout\n//     </button>\n//   </div>\n// );\n\n// const mapStateToProps = state => ({\n//   name: authSelectors.getUsername(state),\n//   avatar: defaultAvatar,\n// });\n\n// const mapDispatchToProps = {\n//   onLogout: authOperations.logOut,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst styles = {\n  link: {\n    display: 'inline-block',\n    textDecoration: 'none',\n    padding: 12,\n    fontWeight: 700,\n    color: '#2A363B',\n  },\n  activeLink: {\n    color: '#E84A5F',\n  },\n};\n\nconst AuthNav = () => (\n  <div>\n    <NavLink\n      to=\"/register\"\n      exact\n      style={styles.link}\n      activeStyle={styles.activeLink}\n    >\n      Регистрация\n    </NavLink>\n\n    <NavLink\n      to=\"/login\"\n      exact\n      style={styles.link}\n      activeStyle={styles.activeLink}\n    >\n      Логин\n    </NavLink>\n  </div>\n);\n\nexport default AuthNav;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Navigation from './Navigation';\nimport UserMenu from './user-menu/UserMenu';\nimport AuthNav from './AuthNav';\nimport { authSelectors } from '../redux/auth';\n\nconst styles = {\n  header: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderBottom: '1px solid #2A363B',\n  },\n};\n\nexport default function AppBar() {\n  const isAuthenticated = useSelector(authSelectors.getIsAuthenticated);\n\n  return (\n    <header style={styles.header}>\n      <Navigation />\n      {isAuthenticated ? <UserMenu /> : <AuthNav />}\n    </header>\n  );\n}\n\n// const AppBar = ({ isAuthenticated }) => (\n//   <header style={styles.header}>\n//     <Navigation />\n//     {isAuthenticated ? <UserMenu /> : <AuthNav />}\n//   </header>\n// );\n\n// const mapStateToProps = state => ({\n//   isAuthenticated: authSelectors.getIsAuthenticated(state),\n// });\n\n// export default connect(mapStateToProps, null)(AppBar);\n","import React from 'react';\nimport './Container.scss';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nexport default Container;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { authSelectors } from '../redux/auth';\n\n/**\n * Если маршрут приватный и пользователь залогинен - рендерит компонент\n * - В противном случае рендерит Redirect на /login\n */\n\nexport default function PrivateRoute({\n  component: Component,\n  redirectTo,\n  ...routeProps\n}) {\n  const isAuthenticated = useSelector(authSelectors.getIsAuthenticated);\n\n  return (\n    <Route\n      {...routeProps}\n      render={props =>\n        isAuthenticated ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to={redirectTo} />\n        )\n      }\n    />\n  );\n}\n\n// const PrivateRoute = ({\n//   component: Component,\n//   isAuthenticated,\n//   redirectTo,\n//   ...routeProps\n// }) => (\n//   <Route\n//     {...routeProps}\n//     render={props =>\n//       isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\n//     }\n//   />\n// );\n\n// const mapStateToProps = state => ({\n//   isAuthenticated: authSelectors.getIsAuthenticated(state),\n// });\n\n// export default connect(mapStateToProps)(PrivateRoute);\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { authSelectors } from '../redux/auth';\n\n/**\n * Если маршрут ограниченный, и пользователь залогинен  - рендерит редирект на /contacts\n * - В противном случае рендерит компонент\n */\n\nexport default function PublicRoute({\n  component: Component,\n  redirectTo,\n  ...routeProps\n}) {\n  const isAuthenticated = useSelector(authSelectors.getIsAuthenticated);\n\n  return (\n    <Route\n      {...routeProps}\n      render={props =>\n        isAuthenticated && routeProps.restricted ? (\n          <Redirect to={redirectTo} />\n        ) : (\n          <Component {...props} />\n        )\n      }\n    />\n  );\n}\n\n// const PublicRoute = ({\n//   component: Component,\n//   isAuthenticated,\n//   redirectTo,\n//   ...routeProps\n// }) => (\n//   <Route\n//     {...routeProps}\n//     render={props =>\n//       isAuthenticated && routeProps.restricted ? (\n//         <Redirect to={redirectTo} />\n//       ) : (\n//         <Component {...props} />\n//       )\n//     }\n//   />\n// );\n\n// const mapStateToProps = state => ({\n//   isAuthenticated: authSelectors.getIsAuthenticated(state),\n// });\n\n// export default connect(mapStateToProps)(PublicRoute);\n","import React, { Suspense, lazy, useEffect } from 'react';\r\nimport { Switch } from 'react-router-dom';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nimport AppBar from '../AppBar';\r\nimport Container from '../container';\r\nimport { authOperations } from '../../redux/auth';\r\nimport PrivateRoute from '../../components/PrivateRoute';\r\nimport PublicRoute from '../../components/PublicRoute';\r\nimport { useDispatch } from 'react-redux';\r\nconst HomeView = lazy(() =>\r\n  import('../../views/HomeView' /* webpackChunkName: \"home-view\" */),\r\n);\r\nconst ContactsView = lazy(() =>\r\n  import('../../views/ContactsView' /* webpackChunkName: \"contacts-view\" */),\r\n);\r\nconst RegisterView = lazy(() =>\r\n  import('../../views/RegisterView' /* webpackChunkName: \"register-view\" */),\r\n);\r\nconst LoginView = lazy(() =>\r\n  import('../../views/LoginView' /* webpackChunkName: \"login-view\" */),\r\n);\r\n\r\nexport default function App() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(authOperations.getCurrentUser());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Container>\r\n      <AppBar />\r\n\r\n      <Suspense\r\n        fallback={\r\n          <Loader type=\"ThreeDots\" color=\"green\" height={80} width={80} />\r\n        }\r\n      >\r\n        <Switch>\r\n          <PublicRoute exact path=\"/\" component={HomeView} />\r\n          <PublicRoute\r\n            path=\"/register\"\r\n            restricted\r\n            redirectTo=\"/contacts\"\r\n            component={RegisterView}\r\n          />\r\n          <PublicRoute\r\n            path=\"/login\"\r\n            restricted\r\n            redirectTo=\"/contacts\"\r\n            component={LoginView}\r\n          />\r\n          <PrivateRoute\r\n            path=\"/contacts\"\r\n            redirectTo=\"/login\"\r\n            component={ContactsView}\r\n          />\r\n        </Switch>\r\n      </Suspense>\r\n    </Container>\r\n  );\r\n}\r\n\r\n// class App extends Component {\r\n//   componentDidMount() {\r\n//     this.props.onGetCurretnUser();\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <Container>\r\n//         <AppBar />\r\n\r\n//         <Suspense\r\n//           fallback={\r\n//             <Loader type=\"ThreeDots\" color=\"green\" height={80} width={80} />\r\n//           }\r\n//         >\r\n//           <Switch>\r\n//             <PublicRoute exact path=\"/\" component={HomeView} />\r\n//             <PublicRoute\r\n//               path=\"/register\"\r\n//               restricted\r\n//               redirectTo=\"/contacts\"\r\n//               component={RegisterView}\r\n//             />\r\n//             <PublicRoute\r\n//               path=\"/login\"\r\n//               restricted\r\n//               redirectTo=\"/contacts\"\r\n//               component={LoginView}\r\n//             />\r\n//             <PrivateRoute\r\n//               path=\"/contacts\"\r\n//               redirectTo=\"/login\"\r\n//               component={ContactsView}\r\n//             />\r\n//           </Switch>\r\n//         </Suspense>\r\n//       </Container>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapDispatchToProps = {\r\n//   onGetCurretnUser: authOperations.getCurrentUser,\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(App);\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  handleInput,\r\n} from './contacts-actions';\r\nimport { authActions } from '../auth';\r\n\r\nconst contacts = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) => [\r\n    ...state.filter(contact => contact.id !== payload),\r\n  ],\r\n  [authActions.logoutSuccess]: () => [],\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [handleInput]: (_, { payload }) => payload,\r\n  [authActions.logoutSuccess]: () => '',\r\n});\r\n\r\nexport default combineReducers({\r\n  items: contacts,\r\n  filter,\r\n  loading,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport { authReducer } from './auth';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  // devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n\r\n// export default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport App from './components/app/App';\nimport store from './redux/store';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\n// get all\r\nconst fetchContactsRequest = createAction('contacts/fetch-contacts-request');\r\nconst fetchContactsSuccess = createAction('contacts/fetch-contacts-success');\r\nconst fetchContactsError = createAction('contacts/fetch-contacts-error');\r\n\r\n// create\r\nconst addContactRequest = createAction('contacts/add-contact-request');\r\nconst addContactSuccess = createAction('contacts/add-contact-success');\r\nconst addContactError = createAction('contacts/add-contact-error');\r\n\r\n// delete\r\nconst deleteContactRequest = createAction('contacts/delete-contact-request');\r\nconst deleteContactSuccess = createAction('contacts/delete-contact-success');\r\nconst deleteContactError = createAction('contacts/delete-contact-error');\r\n\r\n// basic - fron-end action\r\nconst handleInput = createAction('contacts/handleInput');\r\n\r\nexport {\r\n  handleInput,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\n\nconst registerRequest = createAction('auth/registerRequest');\nconst registerSuccess = createAction('auth/registerSuccess');\nconst registerError = createAction('auth/registerError');\n\nconst loginRequest = createAction('auth/loginRequest');\nconst loginSuccess = createAction('auth/loginSuccess');\nconst loginError = createAction('auth/loginError');\n\nconst logoutRequest = createAction('auth/logoutRequest');\nconst logoutSuccess = createAction('auth/logoutSuccess');\nconst logoutError = createAction('auth/logoutError');\n\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\n\nexport default {\n  registerRequest,\n  registerSuccess,\n  registerError,\n  logoutRequest,\n  logoutSuccess,\n  logoutError,\n  loginRequest,\n  loginSuccess,\n  loginError,\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n};\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport authActions from './auth-actions';\n\nconst initialUserState = { name: null, email: null };\n\nconst user = createReducer(initialUserState, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\n  [authActions.logoutSuccess]: () => initialUserState,\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\n});\n\nconst token = createReducer(null, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\n  [authActions.logoutSuccess]: () => null,\n});\n\nconst setError = (_, { payload }) => payload;\n\nconst error = createReducer(null, {\n  [authActions.registerError]: setError,\n  [authActions.loginError]: setError,\n  [authActions.logoutError]: setError,\n  [authActions.getCurrentUserError]: setError,\n});\n\nconst isAuthenticated = createReducer(false, {\n  [authActions.registerSuccess]: () => true,\n  [authActions.loginSuccess]: () => true,\n  [authActions.getCurrentUserSuccess]: () => true,\n\n  [authActions.registerError]: () => false,\n  [authActions.loginError]: () => false,\n  [authActions.getCurrentUserError]: () => false,\n  [authActions.logoutSuccess]: () => false,\n});\n\nexport default combineReducers({\n  user,\n  isAuthenticated,\n  token,\n  error,\n});\n","import axios from 'axios';\nimport authActions from './auth-actions';\n\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com';\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\n/*\n  POST @ /users/signup\n  body { name, email, password }\n  После успешной регистрации добавляем токен в HTTP-заголовок\n */\nconst register = credentials => async dispatch => {\n  dispatch(authActions.registerRequest());\n  try {\n    const response = await axios.post('/users/signup', credentials);\n    token.set(response.data.token);\n    dispatch(authActions.registerSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.registerError(error.message));\n  }\n};\n\n/*\n  POST @ /users/login\n  body: { email, password }\n  После успешного логина добавляем токен в HTTP-заголовок\n */\nconst logIn = credentials => async dispatch => {\n  dispatch(authActions.loginRequest());\n  try {\n    const response = await axios.post('/users/login', credentials);\n    token.set(response.data.token);\n    dispatch(authActions.loginSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.loginError(error.message));\n  }\n};\n\n/*\n  POST @ /users/logout\n  headers: Authorization: Bearer token\n  После успешного логаута, удаляем токен из HTTP-заголовка\n */\nconst logOut = () => async dispatch => {\n  dispatch(authActions.logoutRequest());\n  try {\n    await axios.post('/users/logout');\n    token.unset();\n    dispatch(authActions.logoutSuccess());\n  } catch (error) {\n    dispatch(authActions.logoutError(error.message));\n  }\n};\n\n/*\n  GET @ /users/current\n  headers: Authorization: Bearer token\n  1. Забираем токен из стейта через getState()\n  2. Если токена нет, выходим не выполняя никаких операций\n  3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\n */\nconst getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n\n  if (!persistedToken) {\n    return;\n  }\n\n  token.set(persistedToken);\n\n  dispatch(authActions.getCurrentUserRequest());\n\n  try {\n    const response = await axios.get('/users/current');\n    console.log(response);\n    dispatch(authActions.getCurrentUserSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.getCurrentUserError(error.message));\n  }\n};\n\nexport default { register, logOut, logIn, getCurrentUser };\n","// const getIsAuthenticated = state => state.auth.token;\nconst getIsAuthenticated = state => state.auth.isAuthenticated;\n\nconst getUsername = state => state.auth.user?.name;\n\nexport default {\n  getIsAuthenticated,\n  getUsername,\n};\n"],"sourceRoot":""}